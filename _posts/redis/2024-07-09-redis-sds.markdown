---
layout: default
redis: true
modal-id: 30000003
date: 2024-07-09
img: pexels-matreding-23105882.jpg
alt: image-alt
project-date: July 2024
client: Start Bootstrap
category: redis
subtitle: 简单动态字符串
description: sds
---

### 简单动态字符串 - sds    
> 一种用于存储二进制数据的一种结构，具有动态扩容的特点，其实现位于src/sds.h和src/sds.c中。从版本3.2开始，sds底层数据结构也发生改变。  


**字符串编码类型**  
字符串有三种 encoding 类型 int 、 raw 、 embstr 。  
- int：用于整数类型  
- embstr：用于短字符串
- raw：用于长字符串  

定义在 server.h 中，下面列出 string 类型的编码  
```C
#define OBJ_ENCODING_RAW 0     /* Raw representation */
#define OBJ_ENCODING_INT 1     /* Encoded as integer */
#define OBJ_ENCODING_EMBSTR 8  /* Embedded sds string encoding */
```  

**int**  
如果一个字符串对象保存的是整数值，并且这个整数值可以用 long 类型来表示，那么这个整数值将会保存在字符串对象结构的 ptr 属性里面（将 void* 转换成 long ），并将字符串对象的编码设置为 int 。  
相对于用 raw 编码， int 编码既节省了指针占用的内存，也节省了 sds 结构的内存。  

<center>   
<img src="../../img/redis/sds/string-int.png" class="img-responsive img-centered" alt="image-alt">
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">int示例</div>
</center>

**embstr**  
embstr 编码是专门用于保存短字符串的一种优化编码方式。当字符串的长度小于等于 44(redis 3.2版本之前为39) 字节的时候，将采用 embstr 编码。  
创建字符串对象的代码如下（object.c）：
```C
/* Create a string object with EMBSTR encoding if it is smaller than
 * OBJ_ENCODING_EMBSTR_SIZE_LIMIT, otherwise the RAW encoding is
 * used.
 * 如果字符串小于等于OBJ_ENCODING_EMBSTR_SIZE_LIMIT 创建embstr编码，否则使用raw编码
 *
 * The current limit of 44 is chosen so that the biggest string object
 * we allocate as EMBSTR will still fit into the 64 byte arena of jemalloc.
 * 选择当前44的限制是为了作为embstr分配的最大字符串对象仍然适合64字节的jemalloc
 *
 */
#define OBJ_ENCODING_EMBSTR_SIZE_LIMIT 44
robj *createStringObject(const char *ptr, size_t len) {
    if (len <= OBJ_ENCODING_EMBSTR_SIZE_LIMIT)
        return createEmbeddedStringObject(ptr,len);
    else
        return createRawStringObject(ptr,len);
}
```  
embstr 有个显著的特点，就是 redisObject 跟 sds 的内存是连在一起的。好处有：  
- 分配内存的时候只需要分配一次。而 raw 编码的 sds 跟 RedisObject 分离，就是分配两次内存  
- 同样，释放内存也只需要释放一次  
- 连续内存能更好利用内存带来的优势  


<center>   
<img src="../../img/redis/sds/embstr结构示意图.png" class="img-responsive img-centered" alt="image-alt">
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">embstr结构示意图</div>
</center>

**raw**  
raw 编码主要用来保存长度超过 44（redis 3.2版本之后） 字节的字符串。其真实数据由sdshdr结构来表示存储，外层还是由 RedisObject 包装。  
sds 的结构大致如下：  

<center>   
<img src="../../img/redis/sds/raw-sds结构.png" class="img-responsive img-centered" alt="image-alt">
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">raw-sds结构</div>
</center>  

redisObject 中的 ptr 指针，就是指向 sds 。
<center>   
<img src="../../img/redis/sds/raw-robj.png" class="img-responsive img-centered" alt="image-alt">
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">raw-robj</div>
</center>

**编码转换**  
**int 转 raw**    
- 当字符串传的不是整数的时候，int 就会转成 raw 编码  
- 如果执行了一些修改命令，如 append 等（set 不算），都会转成 raw 编码  
- 一旦编码变为 raw 之后，将不会再转成 embstr  

**embstr 转 raw**  
- 如果执行了一些修改的命令，如 append 等，都会转成 raw 编码，不管修改后字符串的长度。因为没有给 embstr 编码实现修改接口，实际上 embstr 是只读的。  
- 一旦编码为 raw 之后，将不会再转成 embstr  


**embstr编码为什么从 39 位修改为 44 位**
> embstr 编码中，RedisObject 和 sds 是一块连续的内存空间，这块内存空间 Redis 限制了 64 个字节，而 RedisObject 固定占了 16 字节，
redis3.2 版本之前的 sds 占了 8 个字节，再加上字符串末尾 \0 占用了 1 个字节，所以：64-16-8-1=39 字节。  
redis3.2 版本之后 sds 做了优化，对于 embstr 编码会采用 sdshdr8 来存储，而 sdshdr8 占用的空间只有 24 位，即 3 字节（len+alloc+flag） + \0 字符(1字节)，
所以最后为： 64-16-3-1=44 字节。

**sds结构优化**  

<center>   
<img src="../../img/redis/sds/sds结构图-3.0.png" class="img-responsive img-centered" alt="image-alt">
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">sds结构图-3.0</div>
</center>
 

```C
#redis3.2 sdshdr结构  

struct sdshdr {
    //记录buf数组中已使用字节的数量  4字节
    //等于SDS所保存字符串的长度
    unsigned int len;

    //记录buf数组中未使用字节的数量  4字节
    unsigned int free;

    //char数组，用于保存字符串
    char buf[];
};
```  

- len为6，表示这个SDS保存了一个长度为5的字符串  4字节
- free为0，表示这个SDS没有剩余空间  4字节
- buf是个char类型的数组，注意末尾保存了一个空字符 '\0'(1字节)  


```C
#redis6.2 sdshdr结构  

struct __attribute__ ((__packed__)) sdshdr5 {
    unsigned char flags; /* 3 lsb of type, and 5 msb of string length */
    char buf[];
};
struct __attribute__ ((__packed__)) sdshdr8 {
    uint8_t len; /* used */ 已使用 1字节存储
    uint8_t alloc; /* excluding the header and null terminator */ 1字节存储
    unsigned char flags; /* 3 lsb of type, 5 unused bits */ 1字节存储
    char buf[];
};
struct __attribute__ ((__packed__)) sdshdr16 {
    uint16_t len; /* used */
    uint16_t alloc; /* excluding the header and null terminator */
    unsigned char flags; /* 3 lsb of type, 5 unused bits */
    char buf[];
};
struct __attribute__ ((__packed__)) sdshdr32 {
    uint32_t len; /* used */
    uint32_t alloc; /* excluding the header and null terminator */
    unsigned char flags; /* 3 lsb of type, 5 unused bits */
    char buf[];
};
struct __attribute__ ((__packed__)) sdshdr64 {
    uint64_t len; /* used */
    uint64_t alloc; /* excluding the header and null terminator */
    unsigned char flags; /* 3 lsb of type, 5 unused bits */
    char buf[];
};
```

其中 **sdshdr** 是头部，它的大小可以通过 sizeOf() 方法计算， **buf** 是真实存储用户数据的地方，另外注意，从命名上能看出来，这个数据结构除了能存储二进制数据，显然是用于设计作为字符串使用的，所以在 **buf** 中，用户数据后总跟着一个 **\0**，即图中的 "数据"+"\0" 就是所谓的buf。  
- len:保存了SDS保存字符串的长度   (len-alloc 即为之前的 free)
- alloc:分别以uint8, uint16, uint32, uint64表示整个SDS，除头部与末位的 \0，剩余的字节数  
- flags:始终为 1 字节，以低三位标示着头部的类型，高五位未使用 
- buf[]:数组用来保存字符串的每个元素，注意末尾保存了一个空字符 '\0'   

每个字段大小可以根据不同 sdshdr 来计算，比如 sdshdr8 代表 8bit 即 1字节，以此类推。  
```C
printf("%ld\n", sizeof(struct sdshdr8));  // 3
printf("%ld\n", sizeof(struct sdshdr16)); // 5
printf("%ld\n", sizeof(struct sdshdr32)); // 9
printf("%ld\n", sizeof(struct sdshdr64)); // 17
```

另外，我们还需要注意以下源码中的 __attribute__ ((__packed__)) 。它的作用就是告诉编译器取消结构在编译过程中的优化对齐，按照实际占用的字节数进行对齐。  
从上面我们已经知道，结构体会按照所有变量中最宽的基本数据类型做字节对齐。但是用 packed 修饰后，结构体则变为按 1 字节对齐。  
以 sdshdr32 为例，修饰前按 4 字节对齐大小为 12（4\*3 - [len=4;alloc=4;flags=4(实际是1)]） 字节；修饰后按 1 字节对齐，共 9 （4\*2+1 - [len=4;alloc=4;flags=1(实际是1)]）  字节。注意 buf 是个 char 类型的柔性数组，地址连续，始终在 flags 之后，packed 修饰前后如下图所示。  


<center>   
<img src="../../img/redis/sds/packed修饰前后示意.png" class="img-responsive img-centered" alt="image-alt">
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">packed修饰前后示意</div>
</center>

这样做有两个好处：  
1 - 节省内存：例如 sdshdr32 可节省 3 个字节（12-9）  
2 - SDS 返回给上层的，不是结构体首地址，而是指向内容的 buf 指针。因为此时按 1 字节对齐，故 SDS创建成功后， 无论是 sdshdr8、sdsdhr16、还是 sdshdr32，都能通过 (char*)sh+hdrlen 得到 buf 指针地址（其中 hdrlen 是结构体长度，通过 sizeof 计算得到）。修饰后，无论是 sdshdr8、sdshdr16 还是 sdshdr32，都能通过 buf[-1] 找到 flags，因为此时按 1 字节对齐。若没有 packed 的修饰，还需要对不同结构进行处理，实现更复杂。  

<br/>

存在问题:  
&emsp;&emsp;不同长度的字符串是否有必要占用大小相同的头部？一个int占 4 字节，在实际应用中，存放与redis的字符串往往没有这么长，每个字符串都用 4 字节存储未免太浪费空间。  
&emsp;&emsp;短字符串，len 和 free 的长度为 1 字节就够了；长字符串，用 2 字节或 4 字节；更长的字符串，用 8 字节。  
<br/>  
这样确实更省内存，但依然存在以下问题：  
1-如何区分三种情况？  
2-对于短字符串来说，头部还是太长了。以长度为 1 字节的字符串为例，len 和 free 本身就占了 2 字节，能不能进一步压缩呢？  
对于问题 1，考虑增加一个字符 flags 来标识类型，用最小的 1 字节来存储，且把 flags 加在柔性数组 buf 之前，这样虽然多了 1 字节，但是通过偏移柔性数组的指针即能快速定位 flags ，区分类型也可以接受。  
对于问题 2，由于 len 已经是最小的 1 字节了，再压缩只能考虑用位长来存储长度了。  


&emsp;&emsp;结合以上两个问题，5 种类型（长度 1 字节、2 字节、4 字节、8 字节、小于 1 字节）的SDS至少需要 3 位来存储类型（2^3=8），1 个字节 8 位，剩余的 5 位存储长度，可以满足长度小于 32 的短字符串。  

在 Redis 5.0 中，我们用如下结构来存储长度小于 32 的短字符串。  
```C
struct __attribute__ ((__packed__)) sdshdr5 {
    unsigned char flags; /* 低 3 位存储类型，高 5 位存储长度 */
    char buf[];
};
```  
sdshdr5 结构如下，flags 占 1 个字节，其低三位（bit）表示 type，高 5 位（bit）表示长度。能表示的长度区间为 0~31(2^5)。flags 后面就是字符串的内容。

<center>   
<img src="../../img/redis/sds/sdshdr5结构.png" class="img-responsive img-centered" alt="image-alt">
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">sdshdr5结构</div>
</center>

而长度大于 31 的字符串，1 字节依然放不下。按之前的思路，将 len 和 free 单独存放。sdshdr8、sdshdr16、sdshdr32和sdshdr64的结构相同，以 sdshdr8 为例，结构如下：  


<center>   
<img src="../../img/redis/sds/sdshdr8结构.png" class="img-responsive img-centered" alt="image-alt">
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">sdshdr8结构</div>
</center>


其中表头共占用了 S[1(len) + 1(alloc) + 1(flags)] 个字节。flags的内容与 sdshdr5 类型，依然采用 3 位存储类型，但剩余 5 位不存储长度。  


**sds源码分析**  

**字符串创建**  
核心代码在 sds.c#sdsnewlen() :
```C
/* Create a new sds string with the content specified by the 'init' pointer
 * and 'initlen'.
 * 通过init指针和initlen指定的内容创建一个新的sds字符串
 * If NULL is used for 'init' the string is initialized with zero bytes.
 * 如果init为null 字符串将被初始化为0字节
 * If SDS_NOINIT is used, the buffer is left uninitialized;
 * 如果使用SDS_NOINIT，缓冲区将不会初始化
 *
 * The string is always null-termined (all the sds strings are, always) so
 * even if you create an sds string with:
 * 字符串总是空结尾（适用于所有的sds字符串），即使你创建mystring = sdsnewlen("abc",3) 字符串
 *
 * mystring = sdsnewlen("abc",3);
 *
 * You can print the string with printf() as there is an implicit \0 at the
 * end of the string. However the string is binary safe and can contain
 * \0 characters in the middle, as the length is stored in the sds header.
 * 你可以通过printl()打印字符串，在字符串末尾会有一个隐含的 \0. 然而 字符串是二进制安全的，可以包含中间的 \0 字符，因为长度存储在sds头部
 *
 */
sds _sdsnewlen(const void *init, size_t initlen, int trymalloc) {
    void *sh;
    sds s;
    //根据字符串长度初始化sds类型
    char type = sdsReqType(initlen);
    /* Empty strings are usually created in order to append. Use type 8
     * since type 5 is not good at this. */
    //空字符串通常是为了添加而创建。使用 8 代替 5
    if (type == SDS_TYPE_5 && initlen == 0) type = SDS_TYPE_8;
    //根据上一步获取的type计算header的长度
    int hdrlen = sdsHdrSize(type);
    //标志位的指针
    unsigned char *fp; /* flags pointer. */
    //已分配的空间
    size_t usable;

    assert(initlen + hdrlen + 1 > initlen); /* Catch size_t overflow */
    //申请内存 大小为 头部+字符串大小+null字符串结尾
    sh = trymalloc?
        s_trymalloc_usable(hdrlen+initlen+1, &usable) ://尝试分配内存，失败返回null
        s_malloc_usable(hdrlen+initlen+1, &usable);//分配内存或抛出异常
    if (sh == NULL) return NULL;
    if (init==SDS_NOINIT)
        init = NULL;
    else if (!init)
        //初始化内存 将 sh 内存块中前 hdrlen+initlen+1 个字节设置为 0
        memset(sh, 0, hdrlen+initlen+1);
    //将 s 指向字符串的首地址 即指向buf，从首地址向右偏移 hdrlen 长度
    s = (char*)sh+hdrlen;
    //fp 指向头部的最后一个字节 即flag
    fp = ((unsigned char*)s)-1;

    //已使用大小 即申请内容大小减去 头部大小 + 末尾 1 字节占位符
    usable = usable-hdrlen-1;
    if (usable > sdsTypeMaxSize(type))
        usable = sdsTypeMaxSize(type);
    //根据类型初始化字符串
    switch(type) {
        case SDS_TYPE_5: {
            //sdshdr5 的 flags 的 高5bit 存放着 len， 低3bit位存放着 type
            *fp = type | (initlen << SDS_TYPE_BITS);
            break;
        }
        case SDS_TYPE_8: {
            SDS_HDR_VAR(8,s);
            sh->len = initlen;//初始化总长度
            sh->alloc = usable;//初始化已使用长度
            *fp = type;//初始化类型
            break;
        }
        case SDS_TYPE_16: {
            SDS_HDR_VAR(16,s);
            sh->len = initlen;
            sh->alloc = usable;
            *fp = type;
            break;
        }
        case SDS_TYPE_32: {
            SDS_HDR_VAR(32,s);
            sh->len = initlen;
            sh->alloc = usable;
            *fp = type;
            break;
        }
        case SDS_TYPE_64: {
            SDS_HDR_VAR(64,s);
            sh->len = initlen;
            sh->alloc = usable;
            *fp = type;
            break;
        }
    }
    if (initlen && init)
        //将 init 字符串的内容复制到 s 中
        memcpy(s, init, initlen);
    //初始化字符串结尾 占位符
    s[initlen] = '\0';
    return s;
}


/**
 * 根据字符串长度判断 sds类型
 * 1<<5 = 32 :      SDS_TYPE_5
 * 1<<5 = 256:      SDS_TYPE_8
 * 1<<16 = 65536:   SDS_TYPE_16
 * 1<<32 = 4294967296:   SDS_TYPE_32
 * else:   SDS_TYPE_64
 * @param string_size
 * @return
 */
static inline char sdsReqType(size_t string_size) {
    if (string_size < 1<<5)
        return SDS_TYPE_5;
    if (string_size < 1<<8)
        return SDS_TYPE_8;
    if (string_size < 1<<16)
        return SDS_TYPE_16;
#if (LONG_MAX == LLONG_MAX)
    if (string_size < 1ll<<32)
        return SDS_TYPE_32;
    return SDS_TYPE_64;
#else
    return SDS_TYPE_32;
#endif
}


/**
 * 获取不同类型头部长度
 * @param type 
 * @return 
 */
static inline int sdsHdrSize(char type) {
    switch(type&SDS_TYPE_MASK) {
        case SDS_TYPE_5:
            return sizeof(struct sdshdr5);
        case SDS_TYPE_8:
            return sizeof(struct sdshdr8);
        case SDS_TYPE_16:
            return sizeof(struct sdshdr16);
        case SDS_TYPE_32:
            return sizeof(struct sdshdr32);
        case SDS_TYPE_64:
            return sizeof(struct sdshdr64);
    }
    return 0;
}
```
**总结**  
根据字符串长度选择合适的 sds 类型并分配内存，根据字符串类型初始化 sds 。返回值是 sds 结构中 buf 的指针。  
<br/>

**字符串扩容**  
核心代码在 sds.c#sdscat()#sdsMakeRoomFor()
```C
/* Append the specified null terminated C string to the sds string 's'.
 * 将指定的以空结尾的C字符串追加到sds字符串 's'后面
 *
 * After the call, the passed sds string is no longer valid and all the
 * references must be substituted with the new pointer returned by the call.
 * 在此调用之后，传入的sds字符串不再有效，所有的引用必须被该调用返回的指针替代
 */
sds sdscat(sds s, const char *t) {
    return sdscatlen(s, t, strlen(t));
}

/* Append the specified binary-safe string pointed by 't' of 'len' bytes to the
 * end of the specified sds string 's'.
 * 将指定的以空结尾的C字符串追加到sds字符串 's'后面
 *
 * After the call, the passed sds string is no longer valid and all the
 * references must be substituted with the new pointer returned by the call.
 * 在此调用之后，传入的sds字符串不再有效，所有的引用必须被该调用返回的指针替代
 */
sds sdscatlen(sds s, const void *t, size_t len) {
    //获取字符串 s 的长度，即取 len 属性 sds5取flags的高五位
    size_t curlen = sdslen(s);
    //字符串扩容
    s = sdsMakeRoomFor(s,len);
    if (s == NULL) return NULL;
    //将 len 长度 t 复制到 s字符串中， 从 s+curlen 位置开始
    memcpy(s+curlen, t, len);
    //更新字符串长度 即len属性， sds5更新flags的高五位
    sdssetlen(s, curlen+len);
    //末尾添加占位符
    s[curlen+len] = '\0';
    return s;
}


/* Enlarge the free space at the end of the sds string so that the caller
 * is sure that after calling this function can overwrite up to addlen
 * bytes after the end of the string, plus one more byte for nul term.
 * 扩大sds字符串末尾的可用空间，调用后可以保证在字符串结束后覆盖最多 addlen 个字节，再加上一个字节为 null 占位符
 *
 * Note: this does not change the *length* of the sds string as returned
 * by sdslen(), but only the free buffer space we have.
 * 注意：他不会改变 sds 字符串的长度，例如调用 sdslen()， 但是只有可用的缓冲空间
 */
sds sdsMakeRoomFor(sds s, size_t addlen) {
    void *sh, *newsh;
    //获取可用空间 即 len-alloc=free
    size_t avail = sdsavail(s);
    size_t len, newlen, reqlen;
    //获取 s 字符串类型 s指向buf的指针，s[-1]即为flags地址
    char type, oldtype = s[-1] & SDS_TYPE_MASK;
    int hdrlen;
    size_t usable;

    /* Return ASAP if there is enough space left. */
    //如果 可用大于 addlen 直接返回
    if (avail >= addlen) return s;

    //获取字符串长度
    len = sdslen(s);
    //将指针向左偏移 hdr 长度，即当前指针指向 sds头部，而不是从 buf 开始
    sh = (char*)s-sdsHdrSize(oldtype);
    //初始化新增的长度
    reqlen = newlen = (len+addlen);
    assert(newlen > len);   /* Catch size_t overflow */
    //如果拼接字符串后的长度小于 1M， 则扩容为拼接字符串后长度的两倍
    if (newlen < SDS_MAX_PREALLOC)
        newlen *= 2;
    else
        //否则在拼接长度的基础上新增 1M
        newlen += SDS_MAX_PREALLOC;

    //根据最终字符串长度 获取字符串类型
    type = sdsReqType(newlen);

    /* Don't use type 5: the user is appending to the string and type 5 is
     * not able to remember empty space, so sdsMakeRoomFor() must be called
     * at every appending operation. */
    if (type == SDS_TYPE_5) type = SDS_TYPE_8;
    //获取新字符串类型长度
    hdrlen = sdsHdrSize(type);
    assert(hdrlen + newlen + 1 > reqlen);  /* Catch size_t overflow */
    //如果扩容后结构体不变
    if (oldtype==type) {
        //根据原始字符串及扩容后的长度重新分配内存，并将内容复制到新内存中，并清空原内存空间
        //usable会被设置为当前分配的大小
        newsh = s_realloc_usable(sh, hdrlen+newlen+1, &usable);
        if (newsh == NULL) return NULL;
        //将 s 字符串指针指向 buf 数组
        s = (char*)newsh+hdrlen;
    } else {
        /* Since the header size changes, need to move the string forward,
         * and can't use realloc */
        //由于头部长度改变，需要向前移动字符串，不能使用内存重新分配
        //分配最新长度的内存空间，从堆上重新申请数据空间
        newsh = s_malloc_usable(hdrlen+newlen+1, &usable);
        if (newsh == NULL) return NULL;
        //将 len+1 长度的 s 内容复制新内存空间中
        memcpy((char*)newsh+hdrlen, s, len+1);
        //释放原内容空间
        s_free(sh);
        //将 s 字符串指针指向 buf 数组
        s = (char*)newsh+hdrlen;
        //设置字符串类型 flags
        s[-1] = type;
        //更新新字符串长度
        sdssetlen(s, len);
    }
    //获取实际可用数据空间
    usable = usable-hdrlen-1;
    if (usable > sdsTypeMaxSize(type))
        usable = sdsTypeMaxSize(type);
    //设置新字符串已使用总长度 alloc
    sdssetalloc(s, usable);
    return s;
}
```  
**总结**  
扩容阶段：  
- 若 SDS 中剩余空闲空间 avail 大于新增内容的长度 addlen，则无需扩容；  
- 若 SDS 中剩余空闲空间 avail 小于或等于新增内容的长度 addlen：  
  - 若新增后的总长度 len+addlen < 1MB ，则按新长度的两倍扩容；  
  - 若新增后的总长度 len+addlen >= 1MB ，则按新长度加上 1MB 扩容。  


内容分配阶段：  
- 根据扩容后的长度选择对应的SDS类型：  
  - 若类型不变，则只需通过 s_realloc_usable 扩大 buf 数组即可；
  - 若类型变化，则需要为整个 SDS 重新分配内存，并将原来的 SDS 内容拷贝至新位置。   

<center>   
<img src="../../img/redis/sds/sdsMakeRoomFor流程图.png" class="img-responsive img-centered" alt="image-alt">
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">sdsMakeRoomFor流程图</div>
</center> 
<br/>


**字符串释放（惰性空间释放）**  
重置len属性清空SDS在 sds.c#sdsclear()  
真正清空SDS在 sds.c#sdsfree()  
清空空闲缓存在 sds.c#sdsRemoveFreeSpace()   
```C
/* Modify an sds string in-place to make it empty (zero length).
 * However all the existing buffer is not discarded but set as free space
 * so that next append operations will not require allocations up to the
 * number of bytes previously available.
 * 原地修改 SDS 字符串使用为空（长度为0）
 * 但是所有的缓冲区不会被丢弃而是被设置为空闲区域，这样下一个追加操作不需要分配之前可用的字节数
 */
void sdsclear(sds s) {
    //将长度设置为0
    sdssetlen(s, 0);
    s[0] = '\0';
}

/* Free an sds string. No operation is performed if 's' is NULL.
 * 释放 sds字符串。当 s 为 NULL 时不会执行任何操作
 */
void sdsfree(sds s) {
    if (s == NULL) return;
    //s-sdsHdrSize(s[-1]):指针指向sds起始地址  s_free释放内存
    s_free((char*)s-sdsHdrSize(s[-1]));
}

/* Reallocate the sds string so that it has no free space at the end. The
 * contained string remains not altered, but next concatenation operations
 * will require a reallocation.
 * 重新分配sds字符串，使得结尾没有任何空余空间。
 * 原来包含的字符串不会改动，但是下一个串联操作将需要重新分配内存
 *
 * After the call, the passed sds string is no longer valid and all the
 * references must be substituted with the new pointer returned by the call.
 * 在此调用之后，传入的sds字符串将不再有效。且所有的引用将被调用返回的新指针代替
 */
sds sdsRemoveFreeSpace(sds s, int would_regrow) {
    return sdsResize(s, sdslen(s), would_regrow);
}

/* Resize the allocation, this can make the allocation bigger or smaller,
 * if the size is smaller than currently used len, the data will be truncated.
 * 调整分配大小，这可以使分配更大或更小，如果大小小于当前已使用的长度，数据将被截断
 *
 * The when the would_regrow argument is set to 1, it prevents the use of
 * SDS_TYPE_5, which is desired when the sds is likely to be changed again.
 * 当would_regrow参数为1时，它将阻止使用sds5，这是在sds可能再次更改时所需要的
 *
 * The sdsAlloc size will be set to the requested size regardless of the actual
 * allocation size, this is done in order to avoid repeated calls to this
 * function when the caller detects that it has excess space.
 * 无论实际大小多少，sdsAlloc大小都将被设置为请求的大小，这么做是为了当调用者检测到它有多余的空间时防止重复调用此方法
 */
sds sdsResize(sds s, size_t size, int would_regrow) {
    void *sh, *newsh;
    //取原sds类型
    char type, oldtype = s[-1] & SDS_TYPE_MASK;
    //取原sds头部长度
    int hdrlen, oldhdrlen = sdsHdrSize(oldtype);
    //取sds 长度
    size_t len = sdslen(s);
    //指针指向sds起始位置
    sh = (char*)s-oldhdrlen;

    /* Return ASAP if the size is already good. */
    //如果大小已经满足则直接满足  即 len=alloc
    if (sdsalloc(s) == size) return s;

    /* Truncate len if needed. */
    //如果size小于len 直接直接截断
    if (size < len) len = size;

    /* Check what would be the minimum SDS header that is just good enough to
     * fit this string. */
    //根据size  重新计算sds类型
    type = sdsReqType(size);
    if (would_regrow) {
        /* Don't use type 5, it is not good for strings that are expected to grow back. */
        //不要使用type5， 它不适合那些期望增长回来的字符串
        if (type == SDS_TYPE_5) type = SDS_TYPE_8;
    }
    //根据sds类型计算头部大小
    hdrlen = sdsHdrSize(type);

    /* If the type is the same, or can hold the size in it with low overhead
     * (larger than SDS_TYPE_8), we just realloc(), letting the allocator
     * to do the copy only if really needed. Otherwise if the change is
     * huge, we manually reallocate the string to use the different header
     * type.
     * 如果类型相同，或可以用低位表示大小（type大于8），我们只需要 realloc()，让分配器只在真正需要的时候进行复制。
     * 如果改变很大，根据不同的头部大小手动重新分配内存
     */
    //判断是需要重新分配
    int use_realloc = (oldtype==type || (type < oldtype && type > SDS_TYPE_8));
    //若重新分配使用原类型
    size_t newlen = use_realloc ? oldhdrlen+size+1 : hdrlen+size+1;
    int alloc_already_optimal = 0;
    #if defined(USE_JEMALLOC)
        /* je_nallocx returns the expected allocation size for the newlen.
         * We aim to avoid calling realloc() when using Jemalloc if there is no
         * change in the allocation size, as it incurs a cost even if the
         * allocation size stays the same. */
        alloc_already_optimal = (je_nallocx(newlen, 0) == zmalloc_size(sh));
    #endif

    //使用重新分配内存
    if (use_realloc && !alloc_already_optimal) {
        //根据newlen重新分配内存
        newsh = s_realloc(sh, newlen);
        if (newsh == NULL) return NULL;
        //指针指向 buf 缓冲区
        s = (char*)newsh+oldhdrlen;
    } else if (!alloc_already_optimal) {
        //使用新建内存空间 新分配newlen的空间
        newsh = s_malloc(newlen);
        if (newsh == NULL) return NULL;
        //将s的len长度内存复制到newsh+hdrlen中
        memcpy((char*)newsh+hdrlen, s, len);
        //释放sh
        s_free(sh);
        //指针指向 buf缓冲区
        s = (char*)newsh+hdrlen;
        //设置flgas类型
        s[-1] = type;
    }
    //设置字符串末尾占位符
    s[len] = 0;
    //更新长度
    sdssetlen(s, len);
    //更新已使用大小
    sdssetalloc(s, size);
    return s;
}
```  
**总结**  
redis提供了三种方法清空 SDS。  
sdsclear：重置len属性，不直接释放内存，新的数据可以复写，而不用重新申请内存。  
sdsfree：通过 s_free 释放内存。  
sdsRemoveFreeSpace：清空未使用缓存空间，执行字符串相关指令时通过 tryObjectEncoding 触发或通过 clientsCron 定时触发。  

<br/>

##### 为什么使用sds  
- 常数复杂度获取字符串长度  
由于len属性的存在，我们获取sds字符串的长度只需要获取len属性，时间复杂度为O(1)。而对于C语言，获取字符串的长度通常是经过遍历计数来实现的，时间复杂度为O(n)。通过**strlen key**命令可以获取key的字符串长度。  
- 杜绝缓冲区溢出  
在C语言中使用strcat函数来进行两个字符串的拼接，一旦没有分配足够长度的内存空间就会造成缓冲区溢出。而对于SDS数据类型，在进行字符修改的时候，会首先根据记录的len属性检查内存空间是否满足需求，如果不满足，会进行相应的空间扩展，然后在进行修改操作，所以不会出现缓冲区溢出。  
- 减少修改字符串的内存重分配次数  
C语言由于不记录字符串长度，所以如果要修改字符串，必须要重新分配内存，如果没有重新分配，字符串长度增大时会造成内存缓冲区溢出，字符串长度减小时会造成内存泄漏。  
而对于SDS，由于len和alloc属性的存在，对于修改字符串SDS实现了空间预分配和惰性空间释放两种策略:  
1. 空间预分配：对字符串进行空间扩展的时候，扩展的内存比实际需要的多，这样可以减少连续执行字符串增长操作所需的内存重分配次数。  
2. 惰性空间释放：对字符串进行缩短操作时，程序不立即使用内存重分配来回收缩短后多余的字节，而是使用**alloc**属性将这些字节的数量记录下来，等待后续使用。  
- 二进制安全  
因为C字符串以空字符作为字符串结束的标识，而对于一些二进制文件，内容可能包括空字符串，因此C字符串无法正确存取；而所有SDS的API都是以处理二进制的方式来处理buf里面的元素，并且SDS不是以空字符串来判断是否结束，而是以len属性表示的长度来判断字符串是否结束。  
- 兼容部分C字符串函数  
虽然SDS是二进制安全的，但是一样遵从每个字符串都是以空字符串结尾的惯例，这样可以重用C语言库 string.h 中的一部分函数。  

<br/>

##### 空间预分配进一步理解  
当执行追加操作时，比如现在给key='Hello World'的字符后追加' again!'，则这时的len=18，free由0变成了18，此时的 buf='Hello World again!\0..................'(.表示空格)，也就是buf的内存空间是18+18+1=37字节，其中'\0'占1个字节redis给字符串多分配了18个字节的预分配空间，所以下次还有append追加的时候，如果预分配空间足够，
就无须在进行空间分配了。在当前版本中，当新字符串长度小于1M时，redis会分配他们所需大小一倍的空间，当大于1M的时候，就为他们额外多分配1M的空间。  
思考：**这种分配策略会浪费内存资源吗？**   
答：执行过APPEND命令的字符串会带有额外的预分配空间，这些预分配空间不会被释放，除非该字符串所对应的键被删除，或者等到关闭redis之后，再次启动时重新载入的字符串对象将不会有预分配空间。
因为执行APPEND命令的字符串键数量通常并不多，占用内存的体积通常也不大，所以这一般并不算什么问题。另一方面，如果执行APPEND操作的键很多，而字符串的体积又很大的话，那可能就需要修改redis服务器，让它定时释放一些字符串键的预分配空间，从而更有效地使用内存。  

<br/>

##### 小结  
redis的字符串表示为sds，而不是C字符串（以\0结尾的char*），它是redis底层所使用的字符串表示，对比如下：

<center>   
<img src="../../img/redis/sds/sds和c字符串对比.png" class="img-responsive img-centered" alt="image-alt">
<div style="color:orange; border-bottom: 1px solid #d9d9d9;
    display: inline-block;
    color: #999;
    padding: 2px;">redis字符串对比图</div>
</center>  


> https://pdai.tech/md/db/nosql-redis/db-redis-overview.html  
> https://blog.wangjunfeng.com/post/redis-sds/  
> https://juejin.cn/post/7064359936842530830  
> https://www.cnblogs.com/chenchuxin/p/14189925.html  
> https://cloud.tencent.com/developer/article/1911682  
> https://www.cnblogs.com/chenchuxin/p/14204452.html  
> https://juejin.cn/post/6894539895084154887  
> https://blog.csdn.net/yangbodong22011/article/details/78419966  
> https://www.aphysia.cn/archives/redis-2---sdsyuan-ma-fen-xi  